// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id   String @id @default(uuid())
  name String
  type String

  User             User[]
  Setting          Setting[]
  Payroll          Payroll[]
  Payroll_Employee payrollEmployee[]
  Perception       Perception[]
  Receipt          Receipt[]
  Deductions       Deductions[]
  Department       Department[]
  Employee         Employee[]
}

model User {
  id          String  @id @default(uuid())
  name        String
  lastName    String
  email       String  @unique
  phone       String  @unique
  address     String
  password    String
  role        String
  companyName Company @relation(fields: [companyId], references: [id])
  companyId   String
}

model Setting {
  id          String  @id @default(uuid())
  name        String
  amount      Float
  description String
  companyName Company @relation(fields: [companyId], references: [id])
  companyId   String
}

model Department {
  id          String     @id @default(uuid())
  name        String
  companyName Company    @relation(fields: [companyId], references: [id])
  companyId   String
  Employee    Employee[]
}

model Periodicity {
  id            String   @id @default(uuid())
  name          String
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  payrollName   Payroll  @relation(fields: [payrollId], references: [id])
  payrollId     String
}

model Payroll {
  id               String            @id @default(uuid())
  employee         String?
  grossSalary      Float
  totalPerceptions Float
  totalDeductions  Float
  netSalary        Float
  taxInformation   String
  state            String
  details          String
  voucher          String
  companyName      Company           @relation(fields: [companyId], references: [id])
  companyId        String
  Payroll_Employee payrollEmployee[]
  Perception       Perception[]
  Deductions       Deductions[]
  Periodicity      Periodicity[]
}

model Employee {
  id              String            @id @default(uuid())
  name            String
  lastName        String
  identityCard    Int
  birthdate       DateTime
  gender          String
  address         String
  phone           String
  email           String            @unique
  acount          String
  civilStatus     String
  startDate       DateTime
  charge          String
  baseSalary      Float
  departmentName  Department        @relation(fields: [departmentId], references: [id])
  departmentId    String
  companyName     Company           @relation(fields: [companyId], references: [id])
  companyId       String
  payrollEmployee payrollEmployee[]
  Receipt         Receipt[]
  Perception      Perception[]
  Deductions      Deductions[]
}

model payrollEmployee {
  id           String   @id @default(uuid())
  employeeName Employee @relation(fields: [employeeId], references: [id])
  employeeId   String
  payrollName  Payroll  @relation(fields: [payrollId], references: [id])
  payrollId    String
  companyName  Company  @relation(fields: [companyId], references: [id])
  companyId    String
}

model Perception {
  id             String   @id @default(uuid())
  name           String
  amount         Float
  taxInformation String
  payrollName    Payroll  @relation(fields: [payrollId], references: [id])
  payrollId      String
  company        Company  @relation(fields: [companyId], references: [id])
  companyId      String
  Employee_name  Employee @relation(fields: [employeeId], references: [id])
  employeeId     String
}

model Receipt {
  id             String   @id @default(uuid())
  employeeName   Employee @relation(fields: [employeeId], references: [id])
  employeeId     String
  generationDate DateTime
  perception     Float
  deductions     Float
  baseSalary     Float
  amount         Float
  companyName    Company  @relation(fields: [companyId], references: [id])
  companyId      String
}

model Deductions {
  id             String   @id @default(uuid())
  name           String
  amount         Float
  taxInformation String
  payrollName    Payroll  @relation(fields: [payrollId], references: [id])
  payrollId      String
  company        Company  @relation(fields: [companyId], references: [id])
  companyId      String
  employeeName   Employee @relation(fields: [employeeId], references: [id])
  employeeId     String
}
